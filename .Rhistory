}
print(Sys.time()-t2_start)
print("Knee identification completed")
return(tt[length(tt)])
}
for(j in 1:length(min_pts_to_use)){
data <- windowed_subset[[j]] %>%
dplyr::select(BC,CO2,NOx,UFP) %>%
mutate_all(scale)
find_the_knee(data,min_pts_to_use[j])
}
data <- windowed_subset[[1]] %>%
dplyr::select(BC,CO2,NOx,UFP) %>%
mutate_all(scale)
nns <- dbscan::kNN(data,k = min_pts_to_use[1])
dds <- dbscan::kNNdist(data,k = min_pts_to_use[1])
View(nns)
mean(nns$dist[1,])
head(nns$dist)
nrow(nns$dist)
ncol(nns$dist)
nns$dist[1,15311]
dds[1]
test <- dbscan::dbscan(data,eps = 1.7,minPts = min_pts_to_use[1])
head(data)
head(test$cluster)
print(test)
core_data <- data[test$cluster==1]
core_data <- data[test$cluster==1,]
head(core_data)
mean(core_data$BC)
mean(core_data$CO2)
mean(core_data$NOx)
mean(core_data$UFP)
?apply
core_cluster_compactness <- function(poll_data,eps,min_pts_param){
clustering_results <- dbscan::dbscan(poll_data, eps = eps, minPts = min_pts_param)
core_data <- poll_data[clustering_results$cluster==1,]
core_mean <- apply(core_data,2,mean)
distances <- apply(core_data,1,function(x) sum(x-core_mean)^2)
avg_distance <- mean(distances)
return(avg_distance)
}
core_cluster_compactness <- function(poll_data,eps,min_pts_param){
clustering_results <- dbscan::dbscan(poll_data, eps = eps, minPts = min_pts_param)
core_data <- poll_data[clustering_results$cluster==1,]
core_mean <- apply(core_data,2,mean)
return(core_mean)
# distances <- apply(core_data,1,function(x) sum(x-core_mean)^2)
#
# avg_distance <- mean(distances)
#
# return(avg_distance)
}
core_cluster_compactness(data,eps = 1.8, min_pts_param = min_pts_to_use[1])
mean(core_data$BC)
core_cluster_compactness(data,eps = 1.7, min_pts_param = min_pts_to_use[1])
qq <- core_cluster_compactness(data,eps = 1.7, min_pts_param = min_pts_to_use[1])
View(qq)
core_mean <- apply(core_data,2,mean)
sum(core_data[1,]-core_mean)^2
sum((core_data-core_mean)^2)
sum((core_data[1,]-core_mean)^2)
core_data[1,] - core_mean
core_data[1,1] - core_mean[1]
(core_data[1,] - core_mean)^2
core_cluster_compactness <- function(poll_data,eps,min_pts_param){
clustering_results <- dbscan::dbscan(poll_data, eps = eps, minPts = min_pts_param)
core_data <- poll_data[clustering_results$cluster==1,]
core_mean <- apply(core_data,2,mean)
distances <- apply(core_data,1,function(x) return(sum((x-core_mean)^2)))
#
# avg_distance <- mean(distances)
#
return(distances)
}
qq <- core_cluster_compactness(data,eps = 1.7, min_pts_param = min_pts_to_use[1])
sum((core_data[1,]-core_mean)^2)
sum((core_data[2,]-core_mean)^2)
sum((core_data[3,]-core_mean)^2)
qq <- core_cluster_compactness(data,eps = 1.7, min_pts_param = min_pts_to_use[1])
core_cluster_compactness <- function(poll_data,eps,min_pts_param){
clustering_results <- dbscan::dbscan(poll_data, eps = eps, minPts = min_pts_param)
core_data <- poll_data[clustering_results$cluster==1,]
core_mean <- apply(core_data,2,mean)
distances <- apply(core_data,1,function(x) return(sum((x-core_mean)^2)))
avg_distance <- mean(distances)
return(avg_distance)
}
qq <- core_cluster_compactness(data,eps = 1.7, min_pts_param = min_pts_to_use[1])
View(test)
eps_grid <- seq(0.5,5,by = 0.5)
eps_grid
core_cluster_compactness <- function(dbscan_mod,poll_data){
clustering_results <- dbscan_mod$cluster
core_data <- poll_data[clustering_results==1,]
core_mean <- apply(core_data,2,mean)
distances <- apply(core_data,1,function(x) return(sum((x-core_mean)^2)))
avg_distance <- mean(distances)
return(avg_distance)
}
return_anomalies <- function(windowed_data,min_pts_param){
poll_data <- windowed_data %>%
dplyr::select(BC,CO2,NOx,UFP) %>%
mutate_all(scale)
# min_dist <- find_the_knee(poll_data,min_pts = min_pts_param)
# dbscan_res <- dbscan(poll_data,eps = min_dist, minPts = min_pts_param)
#
# assignments <- dbscan_res$cluster
#
# assignments[assignments==0] <- 2
# return("Done")
# return(cbind(windowed_data,"Anomaly"=assignments))
eps_grid <- seq(0.5,5,by = 0.5)
mod_storage <- vector(mode = "list", length = length(eps_grid))
for(i in 1:length(eps_grid)){
mod_storage[[i]] <- dbscan::dbscan(poll_data,eps = eps_grid[i], minPts = min_pts_param)
}
cluster_compactness <- unlist(
lapply(mod_storage,function(x) core_cluster_compactness(x,poll_data)),
use.names = FALSE)
optimal_index <- which.max(cluster_compactness)
optimal_mod <- mod_storage[[optimal_index]]
assignments <- optimal_mod$cluster
assignments[assignments==0] <- 2
return(cbind(windowed_data,"Anomaly"=assignments))
}
core_cluster_compactness <- function(dbscan_mod,poll_data){
clustering_results <- dbscan_mod$cluster
core_data <- poll_data[clustering_results==1,]
core_mean <- apply(core_data,2,mean)
distances <- apply(core_data,1,function(x) return(sum((x-core_mean)^2)))
avg_distance <- mean(distances)
return(avg_distance)
}
source("C:/Users/Blake/Research/Anomaly_Analysis/DBSCAN_Direct_Analysis.R", echo=TRUE)
dbOutput[[1]]
unique(dbOutput[[1]]$Anomaly)
return_anomalies <- function(windowed_data,min_pts_param){
poll_data <- windowed_data %>%
dplyr::select(BC,CO2,NOx,UFP) %>%
mutate_all(scale)
# min_dist <- find_the_knee(poll_data,min_pts = min_pts_param)
# dbscan_res <- dbscan(poll_data,eps = min_dist, minPts = min_pts_param)
#
# assignments <- dbscan_res$cluster
#
# assignments[assignments==0] <- 2
# return("Done")
# return(cbind(windowed_data,"Anomaly"=assignments))
eps_grid <- seq(0.5,5,by = 0.5)
mod_storage <- vector(mode = "list", length = length(eps_grid))
for(i in 1:length(eps_grid)){
mod_storage[[i]] <- dbscan::dbscan(poll_data,eps = eps_grid[i], minPts = min_pts_param)
}
cluster_compactness <- unlist(
lapply(mod_storage,function(x) core_cluster_compactness(x,poll_data)),
use.names = FALSE)
optimal_index <- which.max(cluster_compactness)
optimal_mod <- mod_storage[[optimal_index]]
assignments <- optimal_mod$cluster
assignments[assignments==0] <- 2
print(eps_grid[optimal_index])
return(cbind(windowed_data,"Anomaly"=assignments))
}
{
current_dir <- getwd()
load(paste0(getwd(),"/windowed_subset.RData")) %>% as.list()
windowed_subset <- lapply(windowed_subset,function(x)x %>%  dplyr::select(-c(Anomaly)))
min_pts_to_use <- read.csv(paste0(current_dir,"/min_pts_storage.csv"))[1:4,2]
aggregate_list <- vector(mode="list", length = length(min_pts_to_use))
for(j in 1:length(aggregate_list)){
aggregate_list[[j]] <- list(windowed_subset[[j]],min_pts_to_use[j])
}
dbOutput <- lapply(aggregate_list,function(x) return_anomalies(x[[1]],x[[2]]))
# for(j in 1:30){
#   print(paste0("Iteration: ",j))
#
#   current_min_pts <- min_pts_to_use[j]
#
#
#
#   # par(mfrow=c(3,2))
#   if(F){
#     file_string <- paste0("Iteration_",j,".png")
#     png(paste0(current_dir,"/Anomaly_Analysis_Plots/",file_string))
#     plot(NOx~CO2, data = poll_data,  col = assignments,pch = 20)
#     dev.off()
#   }
# }
}
return_anomalies <- function(windowed_data,min_pts_param){
poll_data <- windowed_data %>%
dplyr::select(BC,CO2,NOx,UFP) %>%
mutate_all(scale)
# min_dist <- find_the_knee(poll_data,min_pts = min_pts_param)
# dbscan_res <- dbscan(poll_data,eps = min_dist, minPts = min_pts_param)
#
# assignments <- dbscan_res$cluster
#
# assignments[assignments==0] <- 2
# return("Done")
# return(cbind(windowed_data,"Anomaly"=assignments))
eps_grid <- seq(0.5,5,by = 0.5)
mod_storage <- vector(mode = "list", length = length(eps_grid))
for(i in 1:length(eps_grid)){
mod_storage[[i]] <- dbscan::dbscan(poll_data,eps = eps_grid[i], minPts = min_pts_param)
}
cluster_compactness <- unlist(
lapply(mod_storage,function(x) core_cluster_compactness(x,poll_data)),
use.names = FALSE)
optimal_index <- which.min(cluster_compactness)
optimal_mod <- mod_storage[[optimal_index]]
assignments <- optimal_mod$cluster
assignments[assignments==0] <- 2
print(eps_grid[optimal_index])
return(cbind(windowed_data,"Anomaly"=assignments))
}
for(j in 1:length(aggregate_list)){
aggregate_list[[j]] <- list(windowed_subset[[j]],min_pts_to_use[j])
}
dbOutput <- lapply(aggregate_list,function(x) return_anomalies(x[[1]],x[[2]]))
{
current_dir <- getwd()
load(paste0(getwd(),"/windowed_subset.RData")) %>% as.list()
windowed_subset <- lapply(windowed_subset,function(x)x %>%  dplyr::select(-c(Anomaly)))
min_pts_to_use <- read.csv(paste0(current_dir,"/min_pts_storage.csv"))[1:6,2]
aggregate_list <- vector(mode="list", length = length(min_pts_to_use))
for(j in 1:length(aggregate_list)){
aggregate_list[[j]] <- list(windowed_subset[[j]],min_pts_to_use[j])
}
dbOutput <- lapply(aggregate_list,function(x) return_anomalies(x[[1]],x[[2]]))
# for(j in 1:30){
#   print(paste0("Iteration: ",j))
#
#   current_min_pts <- min_pts_to_use[j]
#
#
#
#   # par(mfrow=c(3,2))
#   if(F){
#     file_string <- paste0("Iteration_",j,".png")
#     png(paste0(current_dir,"/Anomaly_Analysis_Plots/",file_string))
#     plot(NOx~CO2, data = poll_data,  col = assignments,pch = 20)
#     dev.off()
#   }
# }
}
source("C:/Users/Blake/Research/Anomaly_Analysis/hagler_flag.R", echo=TRUE)
View(hagler_flags)
View(hagler_flags[[2]])
source("C:/Users/Blake/Research/Anomaly_Analysis/hagler_flag.R", echo=TRUE)
source("C:/Users/Blake/Research/Anomaly_Analysis/hagler_flag.R", echo=TRUE)
View(hagler_flags)
head(hagler_flags[[1]])
## Post data processing
{
list_to_tibble <- function(data_subset_list){
output_tibble <- data_subset_list[[1]]
for(i in 2:length(data_subset_list)) {output_tibble <- rbind(output_tibble,data_subset_list[[i]])}
return(output_tibble)
}
hagler_tibble <- list_to_tibble(hagler_flags)
}
current_dir
anomalous_emissions <- hagler_tibble %>%
filter(Anomaly==2) %>%
select(LST,BC,CO2,NOx,UFP)
write.csv(anomalous_emissions,paste0(current_dir,"/Anomalous_Emissions_Results/Anomalous_Emissions_Hagler.csv"))
getwd()
gm_auth_configure(path=paste0(getwd(),"../credentials.json"))
require(gmailr)
gm_auth_configure(path=paste0(getwd(),"../credentials.json"))
getwd()
gm_auth_configure(path="C:/Users/Blake/Research/credentials.json")
getwd()
getwd(..)
getwd("..")
getwd("../")
getwd(../)
getwd(../credentials.json)
getwd("../credentials.json")
dirname(../)
dir <- "../credentials.json"
dirname(dir)
setwd("../")
gm_auth_configure(path=paste0(getwd(),"../credentials.json"))
gm_auth_configure(path=paste0(getwd(),"/credentials.json"))
setwd(paste0(getwd(),"/Anomaly_Analysis/"))
getwd()
source("C:/Users/Blake/Research/Anomaly_Analysis/code_execution.R", echo=TRUE)
source("C:/Users/Blake/Research/Anomaly_Analysis/code_execution.R", echo=TRUE)
source("C:/Users/Blake/Research/Anomaly_Analysis/code_execution.R", echo=TRUE)
drewnick_flag <- function(windowed_data){
poll_data <- windowed_data %>%
select(LST,CO2,UFP)
## Steps
## First, identify points below median of TS for given day
## Calculate standard deviation of points below median.
## Then, go through time series
## For each time series point, determine if it is greater than 3*sd than
## previous point
## If it is, store previous point as background adjacent point
## Flag current point
## And then continue flagging subsequent points if those points are 3*sd +
## sqrt(n)*sd greater than the stored adjacent background point
## Stop flagging otherwise.
## Do this process for CO2, UFP separately
## Then, for final anomaly flag step, flag the entire point directly
## If the point is flagged for CO2 OR UFP
for(j in 2:ncol(poll_data)){
current_data <- poll_data[,j]
background_median <- median(current_data,na.rm = TRUE)
below_background <- current_data[current_data<background_median]
background_sd <- sd(below_background)
return(background_sd)
}
}
current_dir <- getwd()
load(paste0(current_dir,"/windowed_data.RData")) %>% as.list()
windowed_data <- lapply(windowed_data,function(x) x %>% select(-c(Delta_D)))
drewnick_flag(windowed_data[[1]])
debugSource("C:/Users/Blake/Research/Anomaly_Analysis/drewnick_flag.R", echo=TRUE)
head(poll_data)
head(poll_data[,j])
median(poll_data[,j])
current_data <- unlist(poll_data[,j],use.names=F)
function(windowed_data){
poll_data <- windowed_data %>%
select(LST,CO2,UFP)
## Steps
## First, identify points below median of TS for given day
## Calculate standard deviation of points below median.
## Then, go through time series
## For each time series point, determine if it is greater than 3*sd than
## previous point
## If it is, store previous point as background adjacent point
## Flag current point
## And then continue flagging subsequent points if those points are 3*sd +
## sqrt(n)*sd greater than the stored adjacent background point
## Stop flagging otherwise.
## Do this process for CO2, UFP separately
## Then, for final anomaly flag step, flag the entire point directly
## If the point is flagged for CO2 OR UFP
for(j in 2:ncol(poll_data)){
current_data <- poll_data[,j]
background_median <- median(current_data,na.rm = TRUE)
below_background <- current_data[current_data<background_median]
background_sd <- sd(below_background)
return(background_sd)
}
}
debugSource("C:/Users/Blake/Research/Anomaly_Analysis/drewnick_flag.R", echo=TRUE)
median(current_data)
current_data <- unlist(poll_data[,j],use.names=F)
median(current_data)
source("C:/Users/Blake/Research/Anomaly_Analysis/drewnick_flag.R", echo=TRUE)
ts <- windowed_data[[1]] %>% select(LST)
ts <- windowed_data[[1]] %>% select(LST) %>% unlist(use.names = FALSE)
ts <- windowed_data[[1]] %>% select(LST) %>% unlist(use.names = FALSE) %>% as.POSIXct(tz = Sys.timezone(),origin="1970-01-01")
ts[2]-ts[1]
a <- ts[2]-ts[1]
a
difftime(ts[1],ts[2],tz=Sys.timezone(),units = "secs")
difftime(ts[2],ts[1],tz=Sys.timezone(),units = "secs")
a <- difftime(ts[2],ts[1],tz=Sys.timezone(),units = "secs")
a
a+2
sqrt(a)
as.numeric(a)
sqrt(as.numeric(a))
seconds_diff <- function(t1,t2){
return(as.numeric(difftime(t2,t1,tz=Sys.timezone(),units = "secs")))
}
source("C:/Users/Blake/Research/Anomaly_Analysis/drewnick_flag.R", echo=TRUE)
source("C:/Users/Blake/Research/Anomaly_Analysis/drewnick_flag.R", echo=TRUE)
debugSource("C:/Users/Blake/Research/Anomaly_Analysis/drewnick_flag.R", echo=TRUE)
debugSource("C:/Users/Blake/Research/Anomaly_Analysis/drewnick_flag.R", echo=TRUE)
current_timestamps
seconds_diff(current_timestamps[1],current_timestamps[2])
seconds_diff(current_timestamps[2],current_timestamps[1])
debugSource("C:/Users/Blake/Research/Anomaly_Analysis/drewnick_flag.R", echo=TRUE)
debugSource("C:/Users/Blake/Research/Anomaly_Analysis/drewnick_flag.R", echo=TRUE)
current_data[pt_index]
current_data[pt_index-1]+3*background_sd
debugSource("C:/Users/Blake/Research/Anomaly_Analysis/drewnick_flag.R", echo=TRUE)
n <- seconds_diff(current_timestamps[pt_index],adjacent_background_time)
source("C:/Users/Blake/Research/Anomaly_Analysis/drewnick_flag.R", echo=TRUE)
source("C:/Users/Blake/Research/Anomaly_Analysis/drewnick_flag.R", echo=TRUE)
plot(CO2~LST,data=a0,col=Anomaly)
plot(NOx~LST,data=a0,col=Anomaly)
plot(UFP~LST,data=a0,col=Anomaly)
plot(BC~LST,data=a0,col=Anomaly)
debugSource("C:/Users/Blake/Research/Anomaly_Analysis/drewnick_flag.R", echo=TRUE)
View(flag_storage)
any(flag_storage[123,]==2)
finalized_flags <- apply(flag_storage,1,function(x) ifelse(any(x==2),2,1))
finalized_flags[123]
finalized_flags[122]
finalized_flags[119]
finalized_flags[118]
finalized_flags[105]
source("C:/Users/Blake/Research/Anomaly_Analysis/code_execution.R", echo=TRUE)
rm(list=ls())
source("C:/Users/Blake/Research/Anomaly_Analysis/code_execution.R", echo=TRUE)
drewnick_flags <- lapply(windowed_data,function(x) drewnick_flag(x))
source("C:/Users/Blake/Research/Anomaly_Analysis/code_execution.R", echo=TRUE)
rm(list=ls())
source("C:/Users/Blake/Research/Anomaly_Analysis/drewnick_flag.R", echo=TRUE)
source("C:/Users/Blake/Research/Anomaly_Analysis/drewnick_flag.R", echo=TRUE)
flags[8888]
length(current_data)
source("C:/Users/Blake/Research/Anomaly_Analysis/drewnick_flag.R", echo=TRUE)
flags[8889]
source("C:/Users/Blake/Research/Anomaly_Analysis/drewnick_flag.R", echo=TRUE)
head(windowed_data[[17]])
head(windowed_data[[26]])
head(windowed_data[[20]])
head(windowed_data[[18]])
head(windowed_data[[19]])
head(windowed_data[[20]])
head(windowed_data[[22]])
source("C:/Users/Blake/Research/Anomaly_Analysis/drewnick_flag.R", echo=TRUE)
debugSource("C:/Users/Blake/Research/Anomaly_Analysis/drewnick_flag.R", echo=TRUE)
source("C:/Users/Blake/Research/Anomaly_Analysis/drewnick_flag.R", echo=TRUE)
source("C:/Users/Blake/Research/Anomaly_Analysis/drewnick_flag.R", echo=TRUE)
current_data[pt_index]
current_data[pt_index-1] + 3*background_sd
source("C:/Users/Blake/Research/Anomaly_Analysis/drewnick_flag.R", echo=TRUE)
source("C:/Users/Blake/Research/Anomaly_Analysis/drewnick_flag.R", echo=TRUE)
if(current_data[pt_index]>(current_data[pt_index-1]+3*background_sd) &
seconds_diff(current_timestamps[pt_index],current_timestamps[pt_index-1])==1){
# flags[pt_index] <- 2
adjacent_background_point <- current_data[pt_index-1]
adjacent_background_time <- current_timestamps[pt_index-1]
# pt_index <- pt_index+1
# n <- seconds_diff(current_timestamps[pt_index],adjacent_background_time)
n <- 0
while((pt_index <= length(current_data)) &
(current_data[pt_index]>(adjacent_background_point+3*background_sd+sqrt(n)*background_sd))){
flags[pt_index] <- 2
pt_index <- pt_index+1
n <- seconds_diff(current_timestamps[pt_index],adjacent_background_time)
}
if(pt_index < length(current_data)){flags[pt_index] <- 1; pt_index <- pt_index+1}
} else{
flags[pt_index] <- 1
pt_index <- pt_index+1
}
length(flags)
rm(list=ls())
source("C:/Users/Blake/Research/Anomaly_Analysis/drewnick_flag.R", echo=TRUE)
pt_index
if(current_data[pt_index]>(current_data[pt_index-1]+3*background_sd) &
seconds_diff(current_timestamps[pt_index],current_timestamps[pt_index-1])==1){
# flags[pt_index] <- 2
adjacent_background_point <- current_data[pt_index-1]
adjacent_background_time <- current_timestamps[pt_index-1]
# pt_index <- pt_index+1
# n <- seconds_diff(current_timestamps[pt_index],adjacent_background_time)
n <- 0
while((pt_index <= length(current_data)) &
(current_data[pt_index]>(adjacent_background_point+3*background_sd+sqrt(n)*background_sd))){
flags[pt_index] <- 2
pt_index <- pt_index+1
n <- seconds_diff(current_timestamps[pt_index],adjacent_background_time)
}
if(pt_index < length(current_data)){flags[pt_index] <- 1; pt_index <- pt_index+1}
} else{
flags[pt_index] <- 1
pt_index <- pt_index+1
}
View(flag_storage)
flag_storage[,j] <- flags
View(flag_storage)
j
source("C:/Users/Blake/Research/Anomaly_Analysis/drewnick_flag.R", echo=TRUE)
source("C:/Users/Blake/Research/Anomaly_Analysis/drewnick_flag.R", echo=TRUE)
head(a0)
source("C:/Users/Blake/Research/Anomaly_Analysis/drewnick_flag.R", echo=TRUE)
source("C:/Users/Blake/Research/Anomaly_Analysis/code_execution.R", echo=TRUE)
## Save results
{
list_to_tibble <- function(data_subset_list){
output_tibble <- data_subset_list[[1]]
for(i in 2:length(data_subset_list)) {output_tibble <- rbind(output_tibble,data_subset_list[[i]])}
return(output_tibble)
}
drewnick_tibble <- list_to_tibble(drewnick_flags)
anomalous_emissions <- drewnick_tibble %>%
filter(Anomaly==2) %>%
select(LST,BC,CO2,NOx,UFP)
write.csv(anomalous_emissions,paste0(current_dir,"/Anomalous_Emissions_Results/Anomalous_Emissions_Drewnick.csv"))
}
{
for(k in 1:20){
plot(NOx~LST,data = drewnick_flags[[k]],col = Anomaly)
Sys.sleep(10)
}
}
{
for(k in 1:20){
plot(CO2~LST,data = drewnick_flags[[k]],col = Anomaly)
Sys.sleep(10)
}
}
{
for(k in 1:20){
plot(UFP~LST,data = drewnick_flags[[k]],col = Anomaly)
Sys.sleep(5)
}
}
