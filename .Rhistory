dist_subset <- tt[1:30]
for(i in 31:length(tt)){
if(tt[i] > (mean(dist_subset) + 3*sd(dist_subset))){
return(tt[i])
break
} else{
dist_subset <- c(dist_subset,tt[i])
}
}
return(tt[length(tt)])
}
return_anomalies <- function(windowed_data,min_pts_param){
poll_data <- windowed_data %>%
dplyr::select(BC,CO2,NOx,UFP) %>%
mutate_all(scale)
min_dist <- find_the_knee(poll_data,min_pts = min_pts_param)
dbscan_res <- dbscan(poll_data,eps = min_dist, minPts = min_pts_param)
assignments <- dbscan_res$cluster
assignments[assignments==0] <- 2
return(cbind(windowed_data,"Anomaly"=assignments))
}
current_dir <- getwd()
load(paste0(getwd(),"/windowed_subset.RData")) %>% as.list()
windowed_subset <- lapply(windowed_subset,function(x)x %>%  dplyr::select(-c(Anomaly)))
min_pts_to_use <- read.csv(paste0(current_dir,"/min_pts_storage.csv"))[1:2,2]
aggregate_list <- vector(mode="list", length = length(min_pts_to_use))
for(j in 1:length(aggregate_list)){
aggregate_list[[j]] <- list(windowed_subset[[j]],min_pts_to_use[j])
}
dbOutput <- lapply(aggregate_list,function(x) return_anomalies(x[[1]],x[[2]]))
View(dbOutput)
head(dbOutput[[1]])
unique(dbOutput[[1]]$Anomaly)
## Analyzing results from min_pts_storage_boot
files = list.files(paste0(getwd(),"/Houston_Mobile_Dynamic_PCA/min_pts_storage_boot"), pattern = "constant_tol")
## Analyzing results from min_pts_storage_boot
files = list.files(paste0(getwd(),"/Houston_Mobile_Dynamic_PCA/min_pts_storage_boot"), pattern = "*constant_tol*")
## Analyzing results from min_pts_storage_boot
files = list.files(paste0(getwd(),"/Houston_Mobile_Dynamic_PCA/min_pts_storage_boot"))
## Analyzing results from min_pts_storage_boot
files = list.files(paste0(getwd(),"/Anomaly_Analysis/min_pts_storage_boot"))
getwd()
## Analyzing results from min_pts_storage_boot
files = list.files(paste0(getwd(),"/min_pts_storage_boot"))
## Analyzing results from min_pts_storage_boot
files = list.files(paste0(getwd(),"/min_pts_storage_boot"),pattern = "constant_tol")
files
min_pts_res <- vector(mode = "list",length = length(files))
outer_function <- function(a,b,fun){
outer(a,b,function(x,y) vapply(seq_along(x), function(i) fun(x[[i]], y[[i]]), numeric(1)))
}
mean_absolute_difference <- function(x,y){
different_idxs <- which(x!=y)
if(length(different_idxs)>0){
x <- unlist(x,use.names = FALSE)
y <- unlist(y,use.names = FALSE)
diff_x <- x[different_idxs]
diff_y <- y[different_idxs]
abs_differences <- abs(diff_x-diff_y)
return(mean(abs_differences))
} else{
return(0)
}
}
for (i in 1:length(files)){
min_pts_res[[i]] <- read.csv(file =
paste0(getwd(),"/Houston_Mobile_Dynamic_PCA/min_pts_storage_boot/",files[i]),
row.names = 1)
colnames(min_pts_res[[i]]) <- "min_pts"
}
for (i in 1:length(files)){
min_pts_res[[i]] <- read.csv(file =
paste0(getwd(),"/min_pts_storage_boot/",files[i]),
row.names = 1)
colnames(min_pts_res[[i]]) <- "min_pts"
}
outer_function(min_pts_res,min_pts_res,function(x,y) length(which(x != y)))
outer_function(min_pts_res,min_pts_res, function(x,y) mean_absolute_difference(x,y))
rm(list=ls())
source("C:/Users/Blake/Research/Anomaly_Analysis/DBSCAN_Direct_Analysis.R", echo=TRUE)
## Required functions
find_the_knee <- function(poll_data,min_pts){
t1_start <- Sys.time()
tt <- sort(kNNdist(poll_data,k=min_pts))
print(Sys.time()-t1_start)
t2_start <- Sys.time()
dist_subset <- tt[1:30]
for(i in 31:length(tt)){
if(tt[i] > (mean(dist_subset) + 3*sd(dist_subset))){
return(tt[i])
break
} else{
dist_subset <- c(dist_subset,tt[i])
}
}
print(Sys.time()-t2_start)
return(tt[length(tt)])
}
## Required functions
find_the_knee <- function(poll_data,min_pts){
t1_start <- Sys.time()
tt <- sort(kNNdist(poll_data,k=min_pts))
print(Sys.time()-t1_start)
t2_start <- Sys.time()
dist_subset <- tt[1:30]
for(i in 31:length(tt)){
if(tt[i] > (mean(dist_subset) + 3*sd(dist_subset))){
return(tt[i])
break
} else{
dist_subset <- c(dist_subset,tt[i])
}
}
print(Sys.time()-t2_start)
return(tt[length(tt)])
}
return_anomalies <- function(windowed_data,min_pts_param){
poll_data <- windowed_data %>%
dplyr::select(BC,CO2,NOx,UFP) %>%
mutate_all(scale)
min_dist <- find_the_knee(poll_data,min_pts = min_pts_param)
# dbscan_res <- dbscan(poll_data,eps = min_dist, minPts = min_pts_param)
#
# assignments <- dbscan_res$cluster
#
# assignments[assignments==0] <- 2
return("Done")
# return(cbind(windowed_data,"Anomaly"=assignments))
}
{
current_dir <- getwd()
load(paste0(getwd(),"/windowed_subset.RData")) %>% as.list()
windowed_subset <- lapply(windowed_subset,function(x)x %>%  dplyr::select(-c(Anomaly)))
min_pts_to_use <- read.csv(paste0(current_dir,"/min_pts_storage.csv"))[1:2,2]
aggregate_list <- vector(mode="list", length = length(min_pts_to_use))
for(j in 1:length(aggregate_list)){
aggregate_list[[j]] <- list(windowed_subset[[j]],min_pts_to_use[j])
}
dbOutput <- lapply(aggregate_list,function(x) return_anomalies(x[[1]],x[[2]]))
# for(j in 1:30){
#   print(paste0("Iteration: ",j))
#
#   current_min_pts <- min_pts_to_use[j]
#
#
#
#   # par(mfrow=c(3,2))
#   if(F){
#     file_string <- paste0("Iteration_",j,".png")
#     png(paste0(current_dir,"/Anomaly_Analysis_Plots/",file_string))
#     plot(NOx~CO2, data = poll_data,  col = assignments,pch = 20)
#     dev.off()
#   }
# }
}
for(j in 1:length(min_pts_to_use)){
data <- windowed_subset[[j]] %>%
dplyr::select(BC,CO2,NOx,UFP) %>%
mutate_all(scale)
find_the_knee(data,min_pts_to_use[j])
}
## Required functions
find_the_knee <- function(poll_data,min_pts){
t1_start <- Sys.time()
tt <- sort(kNNdist(poll_data,k=min_pts))
print(Sys.time()-t1_start)
print("knndists construction completed")
t2_start <- Sys.time()
dist_subset <- tt[1:30]
for(i in 31:length(tt)){
if(tt[i] > (mean(dist_subset) + 3*sd(dist_subset))){
return(tt[i])
break
} else{
dist_subset <- c(dist_subset,tt[i])
}
}
print(Sys.time()-t2_start)
print("Knee identification completed")
return(tt[length(tt)])
}
for(j in 1:length(min_pts_to_use)){
data <- windowed_subset[[j]] %>%
dplyr::select(BC,CO2,NOx,UFP) %>%
mutate_all(scale)
find_the_knee(data,min_pts_to_use[j])
}
## Required functions
find_the_knee <- function(poll_data,min_pts){
t1_start <- Sys.time()
tt <- kNNdist(poll_data,k=min_pts)
print(Sys.time()-t1_start)
print("knndists construction completed")
t2_start <- Sys.time()
dist_subset <- tt[1:30]
for(i in 31:length(tt)){
if(tt[i] > (mean(dist_subset) + 3*sd(dist_subset))){
print(Sys.time()-t2_start)
print("Knee identification completed")
return(tt[i])
break
} else{
dist_subset <- c(dist_subset,tt[i])
}
}
print(Sys.time()-t2_start)
print("Knee identification completed")
return(tt[length(tt)])
}
for(j in 1:length(min_pts_to_use)){
data <- windowed_subset[[j]] %>%
dplyr::select(BC,CO2,NOx,UFP) %>%
mutate_all(scale)
find_the_knee(data,min_pts_to_use[j])
}
## Required functions
find_the_knee <- function(poll_data,min_pts){
t1_start <- Sys.time()
# tt <- kNNdist(poll_data,k=min_pts)
kNNdistplot(poll_data,k=min_pts)
print(Sys.time()-t1_start)
print("knndists construction completed")
t2_start <- Sys.time()
dist_subset <- tt[1:30]
for(i in 31:length(tt)){
if(tt[i] > (mean(dist_subset) + 3*sd(dist_subset))){
print(Sys.time()-t2_start)
print("Knee identification completed")
return(tt[i])
break
} else{
dist_subset <- c(dist_subset,tt[i])
}
}
print(Sys.time()-t2_start)
print("Knee identification completed")
return(tt[length(tt)])
}
for(j in 1:length(min_pts_to_use)){
data <- windowed_subset[[j]] %>%
dplyr::select(BC,CO2,NOx,UFP) %>%
mutate_all(scale)
find_the_knee(data,min_pts_to_use[j])
}
## Required functions
find_the_knee <- function(poll_data,min_pts){
t1_start <- Sys.time()
tt <- kNNdist(poll_data,k=min_pts,approx = 1)
print(Sys.time()-t1_start)
print("knndists construction completed")
t2_start <- Sys.time()
dist_subset <- tt[1:30]
for(i in 31:length(tt)){
if(tt[i] > (mean(dist_subset) + 3*sd(dist_subset))){
print(Sys.time()-t2_start)
print("Knee identification completed")
return(tt[i])
break
} else{
dist_subset <- c(dist_subset,tt[i])
}
}
print(Sys.time()-t2_start)
print("Knee identification completed")
return(tt[length(tt)])
}
for(j in 1:length(min_pts_to_use)){
data <- windowed_subset[[j]] %>%
dplyr::select(BC,CO2,NOx,UFP) %>%
mutate_all(scale)
find_the_knee(data,min_pts_to_use[j])
}
data <- windowed_subset[[1]] %>%
dplyr::select(BC,CO2,NOx,UFP) %>%
mutate_all(scale)
nns <- dbscan::kNN(data,k = min_pts_to_use[1])
dds <- dbscan::kNNdist(data,k = min_pts_to_use[1])
View(nns)
mean(nns$dist[1,])
head(nns$dist)
nrow(nns$dist)
ncol(nns$dist)
nns$dist[1,15311]
dds[1]
test <- dbscan::dbscan(data,eps = 1.7,minPts = min_pts_to_use[1])
head(data)
head(test$cluster)
print(test)
core_data <- data[test$cluster==1]
core_data <- data[test$cluster==1,]
head(core_data)
mean(core_data$BC)
mean(core_data$CO2)
mean(core_data$NOx)
mean(core_data$UFP)
?apply
core_cluster_compactness <- function(poll_data,eps,min_pts_param){
clustering_results <- dbscan::dbscan(poll_data, eps = eps, minPts = min_pts_param)
core_data <- poll_data[clustering_results$cluster==1,]
core_mean <- apply(core_data,2,mean)
distances <- apply(core_data,1,function(x) sum(x-core_mean)^2)
avg_distance <- mean(distances)
return(avg_distance)
}
core_cluster_compactness <- function(poll_data,eps,min_pts_param){
clustering_results <- dbscan::dbscan(poll_data, eps = eps, minPts = min_pts_param)
core_data <- poll_data[clustering_results$cluster==1,]
core_mean <- apply(core_data,2,mean)
return(core_mean)
# distances <- apply(core_data,1,function(x) sum(x-core_mean)^2)
#
# avg_distance <- mean(distances)
#
# return(avg_distance)
}
core_cluster_compactness(data,eps = 1.8, min_pts_param = min_pts_to_use[1])
mean(core_data$BC)
core_cluster_compactness(data,eps = 1.7, min_pts_param = min_pts_to_use[1])
qq <- core_cluster_compactness(data,eps = 1.7, min_pts_param = min_pts_to_use[1])
View(qq)
core_mean <- apply(core_data,2,mean)
sum(core_data[1,]-core_mean)^2
sum((core_data-core_mean)^2)
sum((core_data[1,]-core_mean)^2)
core_data[1,] - core_mean
core_data[1,1] - core_mean[1]
(core_data[1,] - core_mean)^2
core_cluster_compactness <- function(poll_data,eps,min_pts_param){
clustering_results <- dbscan::dbscan(poll_data, eps = eps, minPts = min_pts_param)
core_data <- poll_data[clustering_results$cluster==1,]
core_mean <- apply(core_data,2,mean)
distances <- apply(core_data,1,function(x) return(sum((x-core_mean)^2)))
#
# avg_distance <- mean(distances)
#
return(distances)
}
qq <- core_cluster_compactness(data,eps = 1.7, min_pts_param = min_pts_to_use[1])
sum((core_data[1,]-core_mean)^2)
sum((core_data[2,]-core_mean)^2)
sum((core_data[3,]-core_mean)^2)
qq <- core_cluster_compactness(data,eps = 1.7, min_pts_param = min_pts_to_use[1])
core_cluster_compactness <- function(poll_data,eps,min_pts_param){
clustering_results <- dbscan::dbscan(poll_data, eps = eps, minPts = min_pts_param)
core_data <- poll_data[clustering_results$cluster==1,]
core_mean <- apply(core_data,2,mean)
distances <- apply(core_data,1,function(x) return(sum((x-core_mean)^2)))
avg_distance <- mean(distances)
return(avg_distance)
}
qq <- core_cluster_compactness(data,eps = 1.7, min_pts_param = min_pts_to_use[1])
View(test)
eps_grid <- seq(0.5,5,by = 0.5)
eps_grid
core_cluster_compactness <- function(dbscan_mod,poll_data){
clustering_results <- dbscan_mod$cluster
core_data <- poll_data[clustering_results==1,]
core_mean <- apply(core_data,2,mean)
distances <- apply(core_data,1,function(x) return(sum((x-core_mean)^2)))
avg_distance <- mean(distances)
return(avg_distance)
}
return_anomalies <- function(windowed_data,min_pts_param){
poll_data <- windowed_data %>%
dplyr::select(BC,CO2,NOx,UFP) %>%
mutate_all(scale)
# min_dist <- find_the_knee(poll_data,min_pts = min_pts_param)
# dbscan_res <- dbscan(poll_data,eps = min_dist, minPts = min_pts_param)
#
# assignments <- dbscan_res$cluster
#
# assignments[assignments==0] <- 2
# return("Done")
# return(cbind(windowed_data,"Anomaly"=assignments))
eps_grid <- seq(0.5,5,by = 0.5)
mod_storage <- vector(mode = "list", length = length(eps_grid))
for(i in 1:length(eps_grid)){
mod_storage[[i]] <- dbscan::dbscan(poll_data,eps = eps_grid[i], minPts = min_pts_param)
}
cluster_compactness <- unlist(
lapply(mod_storage,function(x) core_cluster_compactness(x,poll_data)),
use.names = FALSE)
optimal_index <- which.max(cluster_compactness)
optimal_mod <- mod_storage[[optimal_index]]
assignments <- optimal_mod$cluster
assignments[assignments==0] <- 2
return(cbind(windowed_data,"Anomaly"=assignments))
}
core_cluster_compactness <- function(dbscan_mod,poll_data){
clustering_results <- dbscan_mod$cluster
core_data <- poll_data[clustering_results==1,]
core_mean <- apply(core_data,2,mean)
distances <- apply(core_data,1,function(x) return(sum((x-core_mean)^2)))
avg_distance <- mean(distances)
return(avg_distance)
}
source("C:/Users/Blake/Research/Anomaly_Analysis/DBSCAN_Direct_Analysis.R", echo=TRUE)
dbOutput[[1]]
unique(dbOutput[[1]]$Anomaly)
return_anomalies <- function(windowed_data,min_pts_param){
poll_data <- windowed_data %>%
dplyr::select(BC,CO2,NOx,UFP) %>%
mutate_all(scale)
# min_dist <- find_the_knee(poll_data,min_pts = min_pts_param)
# dbscan_res <- dbscan(poll_data,eps = min_dist, minPts = min_pts_param)
#
# assignments <- dbscan_res$cluster
#
# assignments[assignments==0] <- 2
# return("Done")
# return(cbind(windowed_data,"Anomaly"=assignments))
eps_grid <- seq(0.5,5,by = 0.5)
mod_storage <- vector(mode = "list", length = length(eps_grid))
for(i in 1:length(eps_grid)){
mod_storage[[i]] <- dbscan::dbscan(poll_data,eps = eps_grid[i], minPts = min_pts_param)
}
cluster_compactness <- unlist(
lapply(mod_storage,function(x) core_cluster_compactness(x,poll_data)),
use.names = FALSE)
optimal_index <- which.max(cluster_compactness)
optimal_mod <- mod_storage[[optimal_index]]
assignments <- optimal_mod$cluster
assignments[assignments==0] <- 2
print(eps_grid[optimal_index])
return(cbind(windowed_data,"Anomaly"=assignments))
}
{
current_dir <- getwd()
load(paste0(getwd(),"/windowed_subset.RData")) %>% as.list()
windowed_subset <- lapply(windowed_subset,function(x)x %>%  dplyr::select(-c(Anomaly)))
min_pts_to_use <- read.csv(paste0(current_dir,"/min_pts_storage.csv"))[1:4,2]
aggregate_list <- vector(mode="list", length = length(min_pts_to_use))
for(j in 1:length(aggregate_list)){
aggregate_list[[j]] <- list(windowed_subset[[j]],min_pts_to_use[j])
}
dbOutput <- lapply(aggregate_list,function(x) return_anomalies(x[[1]],x[[2]]))
# for(j in 1:30){
#   print(paste0("Iteration: ",j))
#
#   current_min_pts <- min_pts_to_use[j]
#
#
#
#   # par(mfrow=c(3,2))
#   if(F){
#     file_string <- paste0("Iteration_",j,".png")
#     png(paste0(current_dir,"/Anomaly_Analysis_Plots/",file_string))
#     plot(NOx~CO2, data = poll_data,  col = assignments,pch = 20)
#     dev.off()
#   }
# }
}
return_anomalies <- function(windowed_data,min_pts_param){
poll_data <- windowed_data %>%
dplyr::select(BC,CO2,NOx,UFP) %>%
mutate_all(scale)
# min_dist <- find_the_knee(poll_data,min_pts = min_pts_param)
# dbscan_res <- dbscan(poll_data,eps = min_dist, minPts = min_pts_param)
#
# assignments <- dbscan_res$cluster
#
# assignments[assignments==0] <- 2
# return("Done")
# return(cbind(windowed_data,"Anomaly"=assignments))
eps_grid <- seq(0.5,5,by = 0.5)
mod_storage <- vector(mode = "list", length = length(eps_grid))
for(i in 1:length(eps_grid)){
mod_storage[[i]] <- dbscan::dbscan(poll_data,eps = eps_grid[i], minPts = min_pts_param)
}
cluster_compactness <- unlist(
lapply(mod_storage,function(x) core_cluster_compactness(x,poll_data)),
use.names = FALSE)
optimal_index <- which.min(cluster_compactness)
optimal_mod <- mod_storage[[optimal_index]]
assignments <- optimal_mod$cluster
assignments[assignments==0] <- 2
print(eps_grid[optimal_index])
return(cbind(windowed_data,"Anomaly"=assignments))
}
for(j in 1:length(aggregate_list)){
aggregate_list[[j]] <- list(windowed_subset[[j]],min_pts_to_use[j])
}
dbOutput <- lapply(aggregate_list,function(x) return_anomalies(x[[1]],x[[2]]))
{
current_dir <- getwd()
load(paste0(getwd(),"/windowed_subset.RData")) %>% as.list()
windowed_subset <- lapply(windowed_subset,function(x)x %>%  dplyr::select(-c(Anomaly)))
min_pts_to_use <- read.csv(paste0(current_dir,"/min_pts_storage.csv"))[1:6,2]
aggregate_list <- vector(mode="list", length = length(min_pts_to_use))
for(j in 1:length(aggregate_list)){
aggregate_list[[j]] <- list(windowed_subset[[j]],min_pts_to_use[j])
}
dbOutput <- lapply(aggregate_list,function(x) return_anomalies(x[[1]],x[[2]]))
# for(j in 1:30){
#   print(paste0("Iteration: ",j))
#
#   current_min_pts <- min_pts_to_use[j]
#
#
#
#   # par(mfrow=c(3,2))
#   if(F){
#     file_string <- paste0("Iteration_",j,".png")
#     png(paste0(current_dir,"/Anomaly_Analysis_Plots/",file_string))
#     plot(NOx~CO2, data = poll_data,  col = assignments,pch = 20)
#     dev.off()
#   }
# }
}
source("C:/Users/Blake/Research/Anomaly_Analysis/hagler_flag.R", echo=TRUE)
View(hagler_flags)
View(hagler_flags[[2]])
